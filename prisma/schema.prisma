// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Can be changed to your preferred database provider
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model AiQuestionnaire {
  id                  String     @id @default(cuid())
  createdAt           DateTime   @default(now())
  email               String?    
  answers             String
  
}

model Profile {
  id                  String     @id @default(cuid())
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  
  // Basic Profile Information
  name                String?
  currentRole         String?
  company             String?
  email               String?    @unique
  phoneNumber         String?
  location            String?
  
  // AI Score
  aiScoreTotal        Float
  aiScoreAssessment   String     // "high", "medium", or "low"
  
  // Other Assessment Fields
  skillsRelevance     String?
  careerTrajectory    String?
  skillGaps           String[]
  remark              String?
  aiAnalysis          String?
  aiImpactScore       Float?
  achievementsDescription String?
  tools               String[]
  topSkills           String[]
  summary             String?
  superpowers         String[]
  timelineBeforeAIImpact Int?
  
  // Relations
  skills              Skill[]
  courses             Course[]
  strengths           Strength[]
  experiences         Experience[]
  education           Education[]
  recommendedCourses  RecommendedCourse[]
}

model Skill {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  name       String
  category   String   // "SoftSkill" or "TechnicalSkill"
  
  // Relation to Profile
  profileId  String?
  profile    Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull)
}

model Course {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  title       String
  description String?
  
  // Relation to Profile
  profileId   String?
  profile     Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull)
}

model Strength {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  skill     String
  rating    Int      // 0-5
  
  // Relation to Profile
  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull)
}

model RecommendedCourse {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  title       String
  link        String?
  description String?
  
  // Relation to Profile
  profileId   String?
  profile     Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull)
}

model Experience {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  role        String
  company     String
  duration    String
  description String?
  
  // Relation to Profile
  profileId   String?
  profile     Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull)
}

model Education {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  degree      String
  institution String
  year        String?
  cgpa        String?
  
  // Relation to Profile
  profileId   String?
  profile     Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull)
}