// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Can be changed to your preferred database provider
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String       @id @default(cuid())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Basic Profile Information
  name              String?
  currentRole       String?
  company           String?
  email             String?      @unique
  phoneNumber       String?
  location          String?
  
  // Profile Assessment
  profileAssessment ProfileAssessment?
  
  // Related data
  skills            UserSkill[]
  courses           Course[]
  strengths         Strength[]
  experience        Experience[]
  education         Education[]
  recommendedCourses RecommendedCourse[]
}

model ProfileAssessment {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // AI Score
  aiScoreTotal        Float
  aiScoreAssessment   String   // "high", "medium", or "low"
  
  // Other Assessment Fields
  skillsRelevance     String?
  careerTrajectory    String?
  skillGaps           String[]
  remark              String?
  aiAnalysis          String?
  aiImpactScore       Float?
  achievementsDescription String?
  tools               String[]
  topSkills           String[]
  summary             String?
  superpowers         String[]
  timelineBeforeAIImpact Int?
  
  // Relation to User
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSkill {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  name      String
  category  String   // "SoftSkill" or "TechnicalSkill"
  
  // Relation to User
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, name])
}

model Course {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  title       String
  description String?
  
  // Relation to User
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Strength {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  skill     String
  rating    Int      // 0-5
  
  // Relation to User
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RecommendedCourse {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  title       String
  link        String?
  description String?
  
  // Relation to User
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  role        String
  company     String
  duration    String
  description String?
  
  // Relation to User
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  degree      String
  institution String
  year        String?
  cgpa        String?
  
  // Relation to User
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}